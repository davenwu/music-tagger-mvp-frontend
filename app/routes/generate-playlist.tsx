import { useEffect, useRef, useState } from "react";
import { useNavigate } from "react-router";
import { useSpotifyApi } from "~/hooks/spotify";
import { getTracksByTags, getUserTags, type Tag } from "~/services/music-tagger-service";

export default function GeneratePlaylist() {
    const sdk = useSpotifyApi();
    const playlistNameInputRef = useRef<HTMLInputElement>(null);
    const [userTags, setUserTags] = useState<Tag[]>([]);
    const [selectedTags, setSelectedTags] = useState<number[]>([]);
    const [error, setError] = useState<string | null>(null);
    const navigate = useNavigate();

    useEffect(() => {
        (async () => {
            const tags = await getUserTags();

            setUserTags(tags);
        })();
    }, []);

    function toggleSelection(tagId: number) {
        const index = selectedTags.indexOf(tagId);

        if (index == -1) setSelectedTags(selectedTags.concat(tagId));
        else setSelectedTags(selectedTags.filter(selectedTagId => selectedTagId != tagId));

        setError(null);
    }

    async function generate() {
        if (!sdk) return;

        if (selectedTags.length == 0) {
            setError("You must select at least one tag");
            return;
        }

        const playlistName = playlistNameInputRef.current?.value;
        if (!playlistName || playlistName.length == 0) {
            setError("You must supply a playlist name");
            return;
        }

        const trackIds = await getTracksByTags(selectedTags);
        const spotifyTrackIds = trackIds.map(id => `spotify:track:${id}`);

        const userProfile = await sdk.currentUser.profile();
        const userId = userProfile.id;
        const tagNames = selectedTags
            .map(tagId => userTags.find(t => t.tagId == tagId)?.tagName ?? null)
            .join(', ');

        const playlist = await sdk.playlists.createPlaylist(userId, {
            name: playlistName,
            public: false,
            description: `Generated by MusicTagger. Selected tags: ${tagNames}`
        });

        await sdk.playlists.addItemsToPlaylist(playlist.id, spotifyTrackIds);

        navigate(0);
    }

    return (
        <>
            <ul className="mb-5">
                {userTags.map(t => {
                    const isSelected = !!selectedTags.find(tagId => tagId == t.tagId);

                    return <li
                        key={t.tagId}
                        onClick={() => toggleSelection(t.tagId)}
                        className={`mx-2 px-1 rounded-sm hover:cursor-pointer active:bg-gray-300
                     ${isSelected ?
                                "bg-gray-200" :
                                "hover:bg-gray-100"}`}>
                        {t.tagName}
                    </li>
                })}
            </ul>
            <label className="mx-2">Playlist Name</label>
            <br />
            <input
                ref={playlistNameInputRef}
                type="text"
                className="outline-1 mx-2"
                onChange={() => setError(null)} />
            <br />
            <button onClick={generate} className="mt-5 ms-2 outline-1 rounded-sm">
                Generate Spotify playlist
            </button>
            {error &&
                <p className="text-red-500">{error}</p>
            }
        </>);
}